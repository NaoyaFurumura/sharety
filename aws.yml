---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS in Action: chapter 11 (MultiAZ)"
Parameters:
  KeyName:
    Description: "Key Pair name"
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: mykey
  BlogTitle:
    Description: "The title of the blog."
    Type: String
    Default: "Amazon Web Services in Action - Example"
  AdminUsername:
    Description: "A username for admin."
    Type: String
    Default: admin
  AdminPassword:
    Description: "A password for admin"
    Type: String
    NoEcho: true
  AdminEMail:
    Description: "The email address of the administrator."
    Type: String
Mappings:
  RegionMap:
    "ap-south-1":
      AMI: "ami-2ed19c41"
    "eu-west-3":
      AMI: "ami-c8a017b5"
    "eu-west-2":
      AMI: "ami-e3051987"
    "eu-west-1":
      AMI: "ami-760aaa0f"
    "ap-northeast-2":
      AMI: "ami-fc862292"
    "ap-northeast-1":
      AMI: "ami-2803ac4e"
    "sa-east-1":
      AMI: "ami-1678037a"
    "ca-central-1":
      AMI: "ami-ef3b838b"
    "ap-southeast-1":
      AMI: "ami-dd7935be"
    "ap-southeast-2":
      AMI: "ami-1a668878"
    "eu-central-1":
      AMI: "ami-e28d098d"
    "us-east-1":
      AMI: "ami-6057e21a"
    "us-east-2":
      AMI: "ami-aa1b34cf"
    "us-west-1":
      AMI: "ami-1a033c7a"
    "us-west-2":
      AMI: "ami-32d8124a"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "172.31.0.0/16"
      EnableDnsHostnames: true
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: {}
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: "172.31.38.0/24"
      VpcId: !Ref VPC
  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: "172.31.37.0/24"
      VpcId: !Ref VPC
  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable
  RouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable
  RoutePublicNATToInternet:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetA
      NetworkAclId: !Ref NetworkAcl
  SubnetNetworkAclAssociationB:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetB
      NetworkAclId: !Ref NetworkAcl
  NetworkAclEntryIngress:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
  NetworkAclEntryEgress:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets:
        - Ref: SubnetA
        - Ref: SubnetB
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: "internet-facing"
    DependsOn: VPCGatewayAttachment
  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  LoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: "/"
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200,302"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "awsinaction-elb-sg"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "awsinaction-sg"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          ToPort: 80
  DatabaseSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "awsinaction-db-sg"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
  Database:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete # For AWS::RDS::DBInstance resources that don't specify the DBClusterIdentifier property, the default policy is Snapshot which can cause unwanted costs. However, for production setups, we highly recommend to stay with the default to avoid data loss.
    Properties:
      AllocatedStorage: "5"
      BackupRetentionPeriod: 3
      PreferredBackupWindow: "05:00-06:00"
      DBInstanceClass: "db.t2.micro"
      DBName: wordpress
      Engine: MySQL
      MasterUsername: wordpress
      MasterUserPassword: wordpress
      VPCSecurityGroups:
        - !Sub ${DatabaseSecurityGroup.GroupId}
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true
    DependsOn: VPCGatewayAttachment
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: DB subnet group
      SubnetIds:
        - Ref: SubnetA
        - Ref: SubnetB
